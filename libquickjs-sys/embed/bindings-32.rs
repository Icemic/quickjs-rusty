/* automatically generated by rust-bindgen 0.71.1 */

pub const JS_NAN_BOXING: u32 = 1;
pub const JS_PROP_CONFIGURABLE: u32 = 1;
pub const JS_PROP_WRITABLE: u32 = 2;
pub const JS_PROP_ENUMERABLE: u32 = 4;
pub const JS_PROP_C_W_E: u32 = 7;
pub const JS_PROP_LENGTH: u32 = 8;
pub const JS_PROP_TMASK: u32 = 48;
pub const JS_PROP_NORMAL: u32 = 0;
pub const JS_PROP_GETSET: u32 = 16;
pub const JS_PROP_VARREF: u32 = 32;
pub const JS_PROP_AUTOINIT: u32 = 48;
pub const JS_PROP_HAS_SHIFT: u32 = 8;
pub const JS_PROP_HAS_CONFIGURABLE: u32 = 256;
pub const JS_PROP_HAS_WRITABLE: u32 = 512;
pub const JS_PROP_HAS_ENUMERABLE: u32 = 1024;
pub const JS_PROP_HAS_GET: u32 = 2048;
pub const JS_PROP_HAS_SET: u32 = 4096;
pub const JS_PROP_HAS_VALUE: u32 = 8192;
pub const JS_PROP_THROW: u32 = 16384;
pub const JS_PROP_THROW_STRICT: u32 = 32768;
pub const JS_PROP_NO_ADD: u32 = 65536;
pub const JS_PROP_NO_EXOTIC: u32 = 131072;
pub const JS_PROP_DEFINE_PROPERTY: u32 = 262144;
pub const JS_PROP_REFLECT_DEFINE_PROPERTY: u32 = 524288;
pub const JS_DEFAULT_STACK_SIZE: u32 = 1048576;
pub const JS_EVAL_TYPE_GLOBAL: u32 = 0;
pub const JS_EVAL_TYPE_MODULE: u32 = 1;
pub const JS_EVAL_TYPE_DIRECT: u32 = 2;
pub const JS_EVAL_TYPE_INDIRECT: u32 = 3;
pub const JS_EVAL_TYPE_MASK: u32 = 3;
pub const JS_EVAL_FLAG_STRICT: u32 = 8;
pub const JS_EVAL_FLAG_UNUSED: u32 = 16;
pub const JS_EVAL_FLAG_COMPILE_ONLY: u32 = 32;
pub const JS_EVAL_FLAG_BACKTRACE_BARRIER: u32 = 64;
pub const JS_EVAL_FLAG_ASYNC: u32 = 128;
pub const JS_ATOM_NULL: u32 = 0;
pub const JS_CALL_FLAG_CONSTRUCTOR: u32 = 1;
pub const JS_INVALID_CLASS_ID: u32 = 0;
pub const JS_GPN_STRING_MASK: u32 = 1;
pub const JS_GPN_SYMBOL_MASK: u32 = 2;
pub const JS_GPN_PRIVATE_MASK: u32 = 4;
pub const JS_GPN_ENUM_ONLY: u32 = 16;
pub const JS_GPN_SET_ENUM: u32 = 32;
pub const JS_WRITE_OBJ_BYTECODE: u32 = 1;
pub const JS_WRITE_OBJ_BSWAP: u32 = 0;
pub const JS_WRITE_OBJ_SAB: u32 = 4;
pub const JS_WRITE_OBJ_REFERENCE: u32 = 8;
pub const JS_WRITE_OBJ_STRIP_SOURCE: u32 = 16;
pub const JS_WRITE_OBJ_STRIP_DEBUG: u32 = 32;
pub const JS_READ_OBJ_BYTECODE: u32 = 1;
pub const JS_READ_OBJ_ROM_DATA: u32 = 0;
pub const JS_READ_OBJ_SAB: u32 = 4;
pub const JS_READ_OBJ_REFERENCE: u32 = 8;
pub const JS_DEF_CFUNC: u32 = 0;
pub const JS_DEF_CGETSET: u32 = 1;
pub const JS_DEF_CGETSET_MAGIC: u32 = 2;
pub const JS_DEF_PROP_STRING: u32 = 3;
pub const JS_DEF_PROP_INT32: u32 = 4;
pub const JS_DEF_PROP_INT64: u32 = 5;
pub const JS_DEF_PROP_DOUBLE: u32 = 6;
pub const JS_DEF_PROP_UNDEFINED: u32 = 7;
pub const JS_DEF_OBJECT: u32 = 8;
pub const JS_DEF_ALIAS: u32 = 9;
pub const QJS_VERSION_MAJOR: u32 = 0;
pub const QJS_VERSION_MINOR: u32 = 8;
pub const QJS_VERSION_PATCH: u32 = 0;
pub const QJS_VERSION_SUFFIX: &[u8; 1] = b"\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSRuntime {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSClass {
    _unused: [u8; 0],
}
pub type JSClassID = u32;
pub type JSAtom = u32;
pub const JS_TAG_FIRST: _bindgen_ty_1 = -9;
pub const JS_TAG_BIG_INT: _bindgen_ty_1 = -9;
pub const JS_TAG_SYMBOL: _bindgen_ty_1 = -8;
pub const JS_TAG_STRING: _bindgen_ty_1 = -7;
pub const JS_TAG_MODULE: _bindgen_ty_1 = -3;
pub const JS_TAG_FUNCTION_BYTECODE: _bindgen_ty_1 = -2;
pub const JS_TAG_OBJECT: _bindgen_ty_1 = -1;
pub const JS_TAG_INT: _bindgen_ty_1 = 0;
pub const JS_TAG_BOOL: _bindgen_ty_1 = 1;
pub const JS_TAG_NULL: _bindgen_ty_1 = 2;
pub const JS_TAG_UNDEFINED: _bindgen_ty_1 = 3;
pub const JS_TAG_UNINITIALIZED: _bindgen_ty_1 = 4;
pub const JS_TAG_CATCH_OFFSET: _bindgen_ty_1 = 5;
pub const JS_TAG_EXCEPTION: _bindgen_ty_1 = 6;
pub const JS_TAG_FLOAT64: _bindgen_ty_1 = 7;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub type JSValue = u64;
pub type JSCFunction = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut JSContext,
        this_val: JSValue,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
    ) -> JSValue,
>;
pub type JSCFunctionMagic = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut JSContext,
        this_val: JSValue,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
        magic: ::std::os::raw::c_int,
    ) -> JSValue,
>;
pub type JSCFunctionData = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut JSContext,
        this_val: JSValue,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
        magic: ::std::os::raw::c_int,
        func_data: *mut JSValue,
    ) -> JSValue,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSMallocFunctions {
    pub js_calloc: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            count: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub js_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub js_free: ::std::option::Option<
        unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void, ptr: *mut ::std::os::raw::c_void),
    >,
    pub js_realloc: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub js_malloc_usable_size:
        ::std::option::Option<unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSMallocFunctions"][::std::mem::size_of::<JSMallocFunctions>() - 20usize];
    ["Alignment of JSMallocFunctions"][::std::mem::align_of::<JSMallocFunctions>() - 4usize];
    ["Offset of field: JSMallocFunctions::js_calloc"]
        [::std::mem::offset_of!(JSMallocFunctions, js_calloc) - 0usize];
    ["Offset of field: JSMallocFunctions::js_malloc"]
        [::std::mem::offset_of!(JSMallocFunctions, js_malloc) - 4usize];
    ["Offset of field: JSMallocFunctions::js_free"]
        [::std::mem::offset_of!(JSMallocFunctions, js_free) - 8usize];
    ["Offset of field: JSMallocFunctions::js_realloc"]
        [::std::mem::offset_of!(JSMallocFunctions, js_realloc) - 12usize];
    ["Offset of field: JSMallocFunctions::js_malloc_usable_size"]
        [::std::mem::offset_of!(JSMallocFunctions, js_malloc_usable_size) - 16usize];
};
pub type JSRuntimeFinalizer = ::std::option::Option<
    unsafe extern "C" fn(rt: *mut JSRuntime, arg: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSGCObjectHeader {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn JS_NewRuntime() -> *mut JSRuntime;
}
unsafe extern "C" {
    pub fn JS_SetRuntimeInfo(rt: *mut JSRuntime, info: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn JS_SetMemoryLimit(rt: *mut JSRuntime, limit: usize);
}
unsafe extern "C" {
    pub fn JS_SetDumpFlags(rt: *mut JSRuntime, flags: u64);
}
unsafe extern "C" {
    pub fn JS_GetGCThreshold(rt: *mut JSRuntime) -> usize;
}
unsafe extern "C" {
    pub fn JS_SetGCThreshold(rt: *mut JSRuntime, gc_threshold: usize);
}
unsafe extern "C" {
    pub fn JS_SetMaxStackSize(rt: *mut JSRuntime, stack_size: usize);
}
unsafe extern "C" {
    pub fn JS_UpdateStackTop(rt: *mut JSRuntime);
}
unsafe extern "C" {
    pub fn JS_NewRuntime2(
        mf: *const JSMallocFunctions,
        opaque: *mut ::std::os::raw::c_void,
    ) -> *mut JSRuntime;
}
unsafe extern "C" {
    pub fn JS_FreeRuntime(rt: *mut JSRuntime);
}
unsafe extern "C" {
    pub fn JS_GetRuntimeOpaque(rt: *mut JSRuntime) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn JS_SetRuntimeOpaque(rt: *mut JSRuntime, opaque: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn JS_AddRuntimeFinalizer(
        rt: *mut JSRuntime,
        finalizer: JSRuntimeFinalizer,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type JS_MarkFunc =
    ::std::option::Option<unsafe extern "C" fn(rt: *mut JSRuntime, gp: *mut JSGCObjectHeader)>;
unsafe extern "C" {
    pub fn JS_MarkValue(rt: *mut JSRuntime, val: JSValue, mark_func: JS_MarkFunc);
}
unsafe extern "C" {
    pub fn JS_RunGC(rt: *mut JSRuntime);
}
unsafe extern "C" {
    pub fn JS_IsLiveObject(rt: *mut JSRuntime, obj: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_NewContext(rt: *mut JSRuntime) -> *mut JSContext;
}
unsafe extern "C" {
    pub fn JS_FreeContext(s: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_DupContext(ctx: *mut JSContext) -> *mut JSContext;
}
unsafe extern "C" {
    pub fn JS_GetContextOpaque(ctx: *mut JSContext) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn JS_SetContextOpaque(ctx: *mut JSContext, opaque: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn JS_GetRuntime(ctx: *mut JSContext) -> *mut JSRuntime;
}
unsafe extern "C" {
    pub fn JS_SetClassProto(ctx: *mut JSContext, class_id: JSClassID, obj: JSValue);
}
unsafe extern "C" {
    pub fn JS_GetClassProto(ctx: *mut JSContext, class_id: JSClassID) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetFunctionProto(ctx: *mut JSContext) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewContextRaw(rt: *mut JSRuntime) -> *mut JSContext;
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicBaseObjects(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicDate(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicEval(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicRegExpCompiler(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicRegExp(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicJSON(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicProxy(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicMapSet(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicTypedArrays(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicPromise(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicBigInt(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddIntrinsicWeakRef(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_AddPerformance(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_IsEqual(ctx: *mut JSContext, op1: JSValue, op2: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsStrictEqual(
        ctx: *mut JSContext,
        op1: JSValue,
        op2: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsSameValue(ctx: *mut JSContext, op1: JSValue, op2: JSValue)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsSameValueZero(
        ctx: *mut JSContext,
        op1: JSValue,
        op2: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn js_string_codePointRange(
        ctx: *mut JSContext,
        this_val: JSValue,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn js_calloc_rt(
        rt: *mut JSRuntime,
        count: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_malloc_rt(rt: *mut JSRuntime, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_free_rt(rt: *mut JSRuntime, ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn js_realloc_rt(
        rt: *mut JSRuntime,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_malloc_usable_size_rt(
        rt: *mut JSRuntime,
        ptr: *const ::std::os::raw::c_void,
    ) -> usize;
}
unsafe extern "C" {
    pub fn js_mallocz_rt(rt: *mut JSRuntime, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_calloc(ctx: *mut JSContext, count: usize, size: usize)
        -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_malloc(ctx: *mut JSContext, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_free(ctx: *mut JSContext, ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn js_realloc(
        ctx: *mut JSContext,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_malloc_usable_size(ctx: *mut JSContext, ptr: *const ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn js_realloc2(
        ctx: *mut JSContext,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        pslack: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_mallocz(ctx: *mut JSContext, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn js_strdup(
        ctx: *mut JSContext,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn js_strndup(
        ctx: *mut JSContext,
        s: *const ::std::os::raw::c_char,
        n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSMemoryUsage {
    pub malloc_size: i64,
    pub malloc_limit: i64,
    pub memory_used_size: i64,
    pub malloc_count: i64,
    pub memory_used_count: i64,
    pub atom_count: i64,
    pub atom_size: i64,
    pub str_count: i64,
    pub str_size: i64,
    pub obj_count: i64,
    pub obj_size: i64,
    pub prop_count: i64,
    pub prop_size: i64,
    pub shape_count: i64,
    pub shape_size: i64,
    pub js_func_count: i64,
    pub js_func_size: i64,
    pub js_func_code_size: i64,
    pub js_func_pc2line_count: i64,
    pub js_func_pc2line_size: i64,
    pub c_func_count: i64,
    pub array_count: i64,
    pub fast_array_count: i64,
    pub fast_array_elements: i64,
    pub binary_object_count: i64,
    pub binary_object_size: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSMemoryUsage"][::std::mem::size_of::<JSMemoryUsage>() - 208usize];
    ["Alignment of JSMemoryUsage"][::std::mem::align_of::<JSMemoryUsage>() - 8usize];
    ["Offset of field: JSMemoryUsage::malloc_size"]
        [::std::mem::offset_of!(JSMemoryUsage, malloc_size) - 0usize];
    ["Offset of field: JSMemoryUsage::malloc_limit"]
        [::std::mem::offset_of!(JSMemoryUsage, malloc_limit) - 8usize];
    ["Offset of field: JSMemoryUsage::memory_used_size"]
        [::std::mem::offset_of!(JSMemoryUsage, memory_used_size) - 16usize];
    ["Offset of field: JSMemoryUsage::malloc_count"]
        [::std::mem::offset_of!(JSMemoryUsage, malloc_count) - 24usize];
    ["Offset of field: JSMemoryUsage::memory_used_count"]
        [::std::mem::offset_of!(JSMemoryUsage, memory_used_count) - 32usize];
    ["Offset of field: JSMemoryUsage::atom_count"]
        [::std::mem::offset_of!(JSMemoryUsage, atom_count) - 40usize];
    ["Offset of field: JSMemoryUsage::atom_size"]
        [::std::mem::offset_of!(JSMemoryUsage, atom_size) - 48usize];
    ["Offset of field: JSMemoryUsage::str_count"]
        [::std::mem::offset_of!(JSMemoryUsage, str_count) - 56usize];
    ["Offset of field: JSMemoryUsage::str_size"]
        [::std::mem::offset_of!(JSMemoryUsage, str_size) - 64usize];
    ["Offset of field: JSMemoryUsage::obj_count"]
        [::std::mem::offset_of!(JSMemoryUsage, obj_count) - 72usize];
    ["Offset of field: JSMemoryUsage::obj_size"]
        [::std::mem::offset_of!(JSMemoryUsage, obj_size) - 80usize];
    ["Offset of field: JSMemoryUsage::prop_count"]
        [::std::mem::offset_of!(JSMemoryUsage, prop_count) - 88usize];
    ["Offset of field: JSMemoryUsage::prop_size"]
        [::std::mem::offset_of!(JSMemoryUsage, prop_size) - 96usize];
    ["Offset of field: JSMemoryUsage::shape_count"]
        [::std::mem::offset_of!(JSMemoryUsage, shape_count) - 104usize];
    ["Offset of field: JSMemoryUsage::shape_size"]
        [::std::mem::offset_of!(JSMemoryUsage, shape_size) - 112usize];
    ["Offset of field: JSMemoryUsage::js_func_count"]
        [::std::mem::offset_of!(JSMemoryUsage, js_func_count) - 120usize];
    ["Offset of field: JSMemoryUsage::js_func_size"]
        [::std::mem::offset_of!(JSMemoryUsage, js_func_size) - 128usize];
    ["Offset of field: JSMemoryUsage::js_func_code_size"]
        [::std::mem::offset_of!(JSMemoryUsage, js_func_code_size) - 136usize];
    ["Offset of field: JSMemoryUsage::js_func_pc2line_count"]
        [::std::mem::offset_of!(JSMemoryUsage, js_func_pc2line_count) - 144usize];
    ["Offset of field: JSMemoryUsage::js_func_pc2line_size"]
        [::std::mem::offset_of!(JSMemoryUsage, js_func_pc2line_size) - 152usize];
    ["Offset of field: JSMemoryUsage::c_func_count"]
        [::std::mem::offset_of!(JSMemoryUsage, c_func_count) - 160usize];
    ["Offset of field: JSMemoryUsage::array_count"]
        [::std::mem::offset_of!(JSMemoryUsage, array_count) - 168usize];
    ["Offset of field: JSMemoryUsage::fast_array_count"]
        [::std::mem::offset_of!(JSMemoryUsage, fast_array_count) - 176usize];
    ["Offset of field: JSMemoryUsage::fast_array_elements"]
        [::std::mem::offset_of!(JSMemoryUsage, fast_array_elements) - 184usize];
    ["Offset of field: JSMemoryUsage::binary_object_count"]
        [::std::mem::offset_of!(JSMemoryUsage, binary_object_count) - 192usize];
    ["Offset of field: JSMemoryUsage::binary_object_size"]
        [::std::mem::offset_of!(JSMemoryUsage, binary_object_size) - 200usize];
};
unsafe extern "C" {
    pub fn JS_ComputeMemoryUsage(rt: *mut JSRuntime, s: *mut JSMemoryUsage);
}
unsafe extern "C" {
    pub fn JS_NewAtomLen(
        ctx: *mut JSContext,
        str_: *const ::std::os::raw::c_char,
        len: usize,
    ) -> JSAtom;
}
unsafe extern "C" {
    pub fn JS_NewAtom(ctx: *mut JSContext, str_: *const ::std::os::raw::c_char) -> JSAtom;
}
unsafe extern "C" {
    pub fn JS_NewAtomUInt32(ctx: *mut JSContext, n: u32) -> JSAtom;
}
unsafe extern "C" {
    pub fn JS_DupAtom(ctx: *mut JSContext, v: JSAtom) -> JSAtom;
}
unsafe extern "C" {
    pub fn JS_FreeAtom(ctx: *mut JSContext, v: JSAtom);
}
unsafe extern "C" {
    pub fn JS_FreeAtomRT(rt: *mut JSRuntime, v: JSAtom);
}
unsafe extern "C" {
    pub fn JS_AtomToValue(ctx: *mut JSContext, atom: JSAtom) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_AtomToString(ctx: *mut JSContext, atom: JSAtom) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_AtomToCString(ctx: *mut JSContext, atom: JSAtom) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn JS_ValueToAtom(ctx: *mut JSContext, val: JSValue) -> JSAtom;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSPropertyEnum {
    pub is_enumerable: ::std::os::raw::c_int,
    pub atom: JSAtom,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSPropertyEnum"][::std::mem::size_of::<JSPropertyEnum>() - 8usize];
    ["Alignment of JSPropertyEnum"][::std::mem::align_of::<JSPropertyEnum>() - 4usize];
    ["Offset of field: JSPropertyEnum::is_enumerable"]
        [::std::mem::offset_of!(JSPropertyEnum, is_enumerable) - 0usize];
    ["Offset of field: JSPropertyEnum::atom"]
        [::std::mem::offset_of!(JSPropertyEnum, atom) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSPropertyDescriptor {
    pub flags: ::std::os::raw::c_int,
    pub value: JSValue,
    pub getter: JSValue,
    pub setter: JSValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSPropertyDescriptor"][::std::mem::size_of::<JSPropertyDescriptor>() - 32usize];
    ["Alignment of JSPropertyDescriptor"][::std::mem::align_of::<JSPropertyDescriptor>() - 8usize];
    ["Offset of field: JSPropertyDescriptor::flags"]
        [::std::mem::offset_of!(JSPropertyDescriptor, flags) - 0usize];
    ["Offset of field: JSPropertyDescriptor::value"]
        [::std::mem::offset_of!(JSPropertyDescriptor, value) - 8usize];
    ["Offset of field: JSPropertyDescriptor::getter"]
        [::std::mem::offset_of!(JSPropertyDescriptor, getter) - 16usize];
    ["Offset of field: JSPropertyDescriptor::setter"]
        [::std::mem::offset_of!(JSPropertyDescriptor, setter) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSClassExoticMethods {
    pub get_own_property: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            desc: *mut JSPropertyDescriptor,
            obj: JSValue,
            prop: JSAtom,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_own_property_names: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            ptab: *mut *mut JSPropertyEnum,
            plen: *mut u32,
            obj: JSValue,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_property: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            obj: JSValue,
            prop: JSAtom,
        ) -> ::std::os::raw::c_int,
    >,
    pub define_own_property: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            this_obj: JSValue,
            prop: JSAtom,
            val: JSValue,
            getter: JSValue,
            setter: JSValue,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_property: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            obj: JSValue,
            atom: JSAtom,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            obj: JSValue,
            atom: JSAtom,
            receiver: JSValue,
        ) -> JSValue,
    >,
    pub set_property: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            obj: JSValue,
            atom: JSAtom,
            value: JSValue,
            receiver: JSValue,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSClassExoticMethods"][::std::mem::size_of::<JSClassExoticMethods>() - 28usize];
    ["Alignment of JSClassExoticMethods"][::std::mem::align_of::<JSClassExoticMethods>() - 4usize];
    ["Offset of field: JSClassExoticMethods::get_own_property"]
        [::std::mem::offset_of!(JSClassExoticMethods, get_own_property) - 0usize];
    ["Offset of field: JSClassExoticMethods::get_own_property_names"]
        [::std::mem::offset_of!(JSClassExoticMethods, get_own_property_names) - 4usize];
    ["Offset of field: JSClassExoticMethods::delete_property"]
        [::std::mem::offset_of!(JSClassExoticMethods, delete_property) - 8usize];
    ["Offset of field: JSClassExoticMethods::define_own_property"]
        [::std::mem::offset_of!(JSClassExoticMethods, define_own_property) - 12usize];
    ["Offset of field: JSClassExoticMethods::has_property"]
        [::std::mem::offset_of!(JSClassExoticMethods, has_property) - 16usize];
    ["Offset of field: JSClassExoticMethods::get_property"]
        [::std::mem::offset_of!(JSClassExoticMethods, get_property) - 20usize];
    ["Offset of field: JSClassExoticMethods::set_property"]
        [::std::mem::offset_of!(JSClassExoticMethods, set_property) - 24usize];
};
pub type JSClassFinalizer =
    ::std::option::Option<unsafe extern "C" fn(rt: *mut JSRuntime, val: JSValue)>;
pub type JSClassGCMark = ::std::option::Option<
    unsafe extern "C" fn(rt: *mut JSRuntime, val: JSValue, mark_func: JS_MarkFunc),
>;
pub type JSClassCall = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut JSContext,
        func_obj: JSValue,
        this_val: JSValue,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
        flags: ::std::os::raw::c_int,
    ) -> JSValue,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSClassDef {
    pub class_name: *const ::std::os::raw::c_char,
    pub finalizer: JSClassFinalizer,
    pub gc_mark: JSClassGCMark,
    pub call: JSClassCall,
    pub exotic: *mut JSClassExoticMethods,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSClassDef"][::std::mem::size_of::<JSClassDef>() - 20usize];
    ["Alignment of JSClassDef"][::std::mem::align_of::<JSClassDef>() - 4usize];
    ["Offset of field: JSClassDef::class_name"]
        [::std::mem::offset_of!(JSClassDef, class_name) - 0usize];
    ["Offset of field: JSClassDef::finalizer"]
        [::std::mem::offset_of!(JSClassDef, finalizer) - 4usize];
    ["Offset of field: JSClassDef::gc_mark"][::std::mem::offset_of!(JSClassDef, gc_mark) - 8usize];
    ["Offset of field: JSClassDef::call"][::std::mem::offset_of!(JSClassDef, call) - 12usize];
    ["Offset of field: JSClassDef::exotic"][::std::mem::offset_of!(JSClassDef, exotic) - 16usize];
};
unsafe extern "C" {
    pub fn JS_NewClassID(rt: *mut JSRuntime, pclass_id: *mut JSClassID) -> JSClassID;
}
unsafe extern "C" {
    pub fn JS_GetClassID(v: JSValue) -> JSClassID;
}
unsafe extern "C" {
    pub fn JS_NewClass(
        rt: *mut JSRuntime,
        class_id: JSClassID,
        class_def: *const JSClassDef,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsRegisteredClass(rt: *mut JSRuntime, class_id: JSClassID) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_NewNumber(ctx: *mut JSContext, d: f64) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewBigInt64(ctx: *mut JSContext, v: i64) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewBigUint64(ctx: *mut JSContext, v: u64) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_Throw(ctx: *mut JSContext, obj: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetException(ctx: *mut JSContext) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_HasException(ctx: *mut JSContext) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsError(ctx: *mut JSContext, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsUncatchableError(ctx: *mut JSContext, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ResetUncatchableError(ctx: *mut JSContext);
}
unsafe extern "C" {
    pub fn JS_NewError(ctx: *mut JSContext) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ThrowPlainError(
        ctx: *mut JSContext,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ThrowSyntaxError(
        ctx: *mut JSContext,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ThrowTypeError(
        ctx: *mut JSContext,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ThrowReferenceError(
        ctx: *mut JSContext,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ThrowRangeError(
        ctx: *mut JSContext,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ThrowInternalError(
        ctx: *mut JSContext,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ThrowOutOfMemory(ctx: *mut JSContext) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_FreeValue(ctx: *mut JSContext, v: JSValue);
}
unsafe extern "C" {
    pub fn JS_FreeValueRT(rt: *mut JSRuntime, v: JSValue);
}
unsafe extern "C" {
    pub fn JS_DupValue(ctx: *mut JSContext, v: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_DupValueRT(rt: *mut JSRuntime, v: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ToBool(ctx: *mut JSContext, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ToInt32(ctx: *mut JSContext, pres: *mut i32, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ToInt64(ctx: *mut JSContext, pres: *mut i64, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ToIndex(ctx: *mut JSContext, plen: *mut u64, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ToFloat64(ctx: *mut JSContext, pres: *mut f64, val: JSValue)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ToBigInt64(
        ctx: *mut JSContext,
        pres: *mut i64,
        val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ToBigUint64(
        ctx: *mut JSContext,
        pres: *mut u64,
        val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ToInt64Ext(
        ctx: *mut JSContext,
        pres: *mut i64,
        val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_NewStringLen(
        ctx: *mut JSContext,
        str1: *const ::std::os::raw::c_char,
        len1: usize,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewAtomString(ctx: *mut JSContext, str_: *const ::std::os::raw::c_char) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ToString(ctx: *mut JSContext, val: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ToPropertyKey(ctx: *mut JSContext, val: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ToCStringLen2(
        ctx: *mut JSContext,
        plen: *mut usize,
        val1: JSValue,
        cesu8: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn JS_FreeCString(ctx: *mut JSContext, ptr: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn JS_NewObjectProtoClass(
        ctx: *mut JSContext,
        proto: JSValue,
        class_id: JSClassID,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewObjectClass(ctx: *mut JSContext, class_id: ::std::os::raw::c_int) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewObjectProto(ctx: *mut JSContext, proto: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewObject(ctx: *mut JSContext) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_IsFunction(ctx: *mut JSContext, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsConstructor(ctx: *mut JSContext, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetConstructorBit(
        ctx: *mut JSContext,
        func_obj: JSValue,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_NewArray(ctx: *mut JSContext) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_IsArray(ctx: *mut JSContext, val: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_NewDate(ctx: *mut JSContext, epoch_ms: f64) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetProperty(ctx: *mut JSContext, this_obj: JSValue, prop: JSAtom) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetPropertyUint32(ctx: *mut JSContext, this_obj: JSValue, idx: u32) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetPropertyInt64(ctx: *mut JSContext, this_obj: JSValue, idx: i64) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetPropertyStr(
        ctx: *mut JSContext,
        this_obj: JSValue,
        prop: *const ::std::os::raw::c_char,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_SetProperty(
        ctx: *mut JSContext,
        this_obj: JSValue,
        prop: JSAtom,
        val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetPropertyUint32(
        ctx: *mut JSContext,
        this_obj: JSValue,
        idx: u32,
        val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetPropertyInt64(
        ctx: *mut JSContext,
        this_obj: JSValue,
        idx: i64,
        val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetPropertyStr(
        ctx: *mut JSContext,
        this_obj: JSValue,
        prop: *const ::std::os::raw::c_char,
        val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_HasProperty(
        ctx: *mut JSContext,
        this_obj: JSValue,
        prop: JSAtom,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsExtensible(ctx: *mut JSContext, obj: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_PreventExtensions(ctx: *mut JSContext, obj: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_DeleteProperty(
        ctx: *mut JSContext,
        obj: JSValue,
        prop: JSAtom,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetPrototype(
        ctx: *mut JSContext,
        obj: JSValue,
        proto_val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_GetPrototype(ctx: *mut JSContext, val: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetLength(ctx: *mut JSContext, obj: JSValue, pres: *mut i64)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetLength(ctx: *mut JSContext, obj: JSValue, len: i64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_GetOwnPropertyNames(
        ctx: *mut JSContext,
        ptab: *mut *mut JSPropertyEnum,
        plen: *mut u32,
        obj: JSValue,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_GetOwnProperty(
        ctx: *mut JSContext,
        desc: *mut JSPropertyDescriptor,
        obj: JSValue,
        prop: JSAtom,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_FreePropertyEnum(ctx: *mut JSContext, tab: *mut JSPropertyEnum, len: u32);
}
unsafe extern "C" {
    pub fn JS_Call(
        ctx: *mut JSContext,
        func_obj: JSValue,
        this_obj: JSValue,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_Invoke(
        ctx: *mut JSContext,
        this_val: JSValue,
        atom: JSAtom,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_CallConstructor(
        ctx: *mut JSContext,
        func_obj: JSValue,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_CallConstructor2(
        ctx: *mut JSContext,
        func_obj: JSValue,
        new_target: JSValue,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_DetectModule(
        input: *const ::std::os::raw::c_char,
        input_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_Eval(
        ctx: *mut JSContext,
        input: *const ::std::os::raw::c_char,
        input_len: usize,
        filename: *const ::std::os::raw::c_char,
        eval_flags: ::std::os::raw::c_int,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_EvalThis(
        ctx: *mut JSContext,
        this_obj: JSValue,
        input: *const ::std::os::raw::c_char,
        input_len: usize,
        filename: *const ::std::os::raw::c_char,
        eval_flags: ::std::os::raw::c_int,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetGlobalObject(ctx: *mut JSContext) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_IsInstanceOf(
        ctx: *mut JSContext,
        val: JSValue,
        obj: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_DefineProperty(
        ctx: *mut JSContext,
        this_obj: JSValue,
        prop: JSAtom,
        val: JSValue,
        getter: JSValue,
        setter: JSValue,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_DefinePropertyValue(
        ctx: *mut JSContext,
        this_obj: JSValue,
        prop: JSAtom,
        val: JSValue,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_DefinePropertyValueUint32(
        ctx: *mut JSContext,
        this_obj: JSValue,
        idx: u32,
        val: JSValue,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_DefinePropertyValueStr(
        ctx: *mut JSContext,
        this_obj: JSValue,
        prop: *const ::std::os::raw::c_char,
        val: JSValue,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_DefinePropertyGetSet(
        ctx: *mut JSContext,
        this_obj: JSValue,
        prop: JSAtom,
        getter: JSValue,
        setter: JSValue,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetOpaque(obj: JSValue, opaque: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_GetOpaque(obj: JSValue, class_id: JSClassID) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn JS_GetOpaque2(
        ctx: *mut JSContext,
        obj: JSValue,
        class_id: JSClassID,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn JS_GetAnyOpaque(obj: JSValue, class_id: *mut JSClassID) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn JS_ParseJSON(
        ctx: *mut JSContext,
        buf: *const ::std::os::raw::c_char,
        buf_len: usize,
        filename: *const ::std::os::raw::c_char,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_JSONStringify(
        ctx: *mut JSContext,
        obj: JSValue,
        replacer: JSValue,
        space0: JSValue,
    ) -> JSValue;
}
pub type JSFreeArrayBufferDataFunc = ::std::option::Option<
    unsafe extern "C" fn(
        rt: *mut JSRuntime,
        opaque: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn JS_NewArrayBuffer(
        ctx: *mut JSContext,
        buf: *mut u8,
        len: usize,
        free_func: JSFreeArrayBufferDataFunc,
        opaque: *mut ::std::os::raw::c_void,
        is_shared: ::std::os::raw::c_int,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewArrayBufferCopy(ctx: *mut JSContext, buf: *const u8, len: usize) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_DetachArrayBuffer(ctx: *mut JSContext, obj: JSValue);
}
unsafe extern "C" {
    pub fn JS_GetArrayBuffer(ctx: *mut JSContext, psize: *mut usize, obj: JSValue) -> *mut u8;
}
unsafe extern "C" {
    pub fn JS_IsArrayBuffer(obj: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_GetUint8Array(ctx: *mut JSContext, psize: *mut usize, obj: JSValue) -> *mut u8;
}
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_UINT8C: JSTypedArrayEnum = 0;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_INT8: JSTypedArrayEnum = 1;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_UINT8: JSTypedArrayEnum = 2;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_INT16: JSTypedArrayEnum = 3;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_UINT16: JSTypedArrayEnum = 4;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_INT32: JSTypedArrayEnum = 5;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_UINT32: JSTypedArrayEnum = 6;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_BIG_INT64: JSTypedArrayEnum = 7;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_BIG_UINT64: JSTypedArrayEnum = 8;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_FLOAT16: JSTypedArrayEnum = 9;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_FLOAT32: JSTypedArrayEnum = 10;
pub const JSTypedArrayEnum_JS_TYPED_ARRAY_FLOAT64: JSTypedArrayEnum = 11;
pub type JSTypedArrayEnum = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn JS_NewTypedArray(
        ctx: *mut JSContext,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
        array_type: JSTypedArrayEnum,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetTypedArrayBuffer(
        ctx: *mut JSContext,
        obj: JSValue,
        pbyte_offset: *mut usize,
        pbyte_length: *mut usize,
        pbytes_per_element: *mut usize,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewUint8Array(
        ctx: *mut JSContext,
        buf: *mut u8,
        len: usize,
        free_func: JSFreeArrayBufferDataFunc,
        opaque: *mut ::std::os::raw::c_void,
        is_shared: ::std::os::raw::c_int,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetTypedArrayType(obj: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_NewUint8ArrayCopy(ctx: *mut JSContext, buf: *const u8, len: usize) -> JSValue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSSharedArrayBufferFunctions {
    pub sab_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub sab_free: ::std::option::Option<
        unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void, ptr: *mut ::std::os::raw::c_void),
    >,
    pub sab_dup: ::std::option::Option<
        unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void, ptr: *mut ::std::os::raw::c_void),
    >,
    pub sab_opaque: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSSharedArrayBufferFunctions"]
        [::std::mem::size_of::<JSSharedArrayBufferFunctions>() - 16usize];
    ["Alignment of JSSharedArrayBufferFunctions"]
        [::std::mem::align_of::<JSSharedArrayBufferFunctions>() - 4usize];
    ["Offset of field: JSSharedArrayBufferFunctions::sab_alloc"]
        [::std::mem::offset_of!(JSSharedArrayBufferFunctions, sab_alloc) - 0usize];
    ["Offset of field: JSSharedArrayBufferFunctions::sab_free"]
        [::std::mem::offset_of!(JSSharedArrayBufferFunctions, sab_free) - 4usize];
    ["Offset of field: JSSharedArrayBufferFunctions::sab_dup"]
        [::std::mem::offset_of!(JSSharedArrayBufferFunctions, sab_dup) - 8usize];
    ["Offset of field: JSSharedArrayBufferFunctions::sab_opaque"]
        [::std::mem::offset_of!(JSSharedArrayBufferFunctions, sab_opaque) - 12usize];
};
unsafe extern "C" {
    pub fn JS_SetSharedArrayBufferFunctions(
        rt: *mut JSRuntime,
        sf: *const JSSharedArrayBufferFunctions,
    );
}
pub const JSPromiseStateEnum_JS_PROMISE_PENDING: JSPromiseStateEnum = 0;
pub const JSPromiseStateEnum_JS_PROMISE_FULFILLED: JSPromiseStateEnum = 1;
pub const JSPromiseStateEnum_JS_PROMISE_REJECTED: JSPromiseStateEnum = 2;
pub type JSPromiseStateEnum = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn JS_NewPromiseCapability(ctx: *mut JSContext, resolving_funcs: *mut JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseState(ctx: *mut JSContext, promise: JSValue) -> JSPromiseStateEnum;
}
unsafe extern "C" {
    pub fn JS_PromiseResult(ctx: *mut JSContext, promise: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseResolve(ctx: *mut JSContext, value: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseReject(ctx: *mut JSContext, value: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseAll(ctx: *mut JSContext, iterable: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseAllSettled(ctx: *mut JSContext, iterable: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseAny(ctx: *mut JSContext, iterable: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseRace(ctx: *mut JSContext, iterable: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseWithResolvers(ctx: *mut JSContext) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseThen(
        ctx: *mut JSContext,
        promise: JSValue,
        on_fulfilled_func: JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseThen2(
        ctx: *mut JSContext,
        promise: JSValue,
        on_fulfilled_func: JSValue,
        on_reject_func: JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseCatch(
        ctx: *mut JSContext,
        promise: JSValue,
        on_reject_func: JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_PromiseFinally(
        ctx: *mut JSContext,
        promise: JSValue,
        on_finally_func: JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewSymbol(
        ctx: *mut JSContext,
        description: *const ::std::os::raw::c_char,
        is_global: ::std::os::raw::c_int,
    ) -> JSValue;
}
pub type JSHostPromiseRejectionTracker = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut JSContext,
        promise: JSValue,
        reason: JSValue,
        is_handled: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn JS_SetHostPromiseRejectionTracker(
        rt: *mut JSRuntime,
        cb: JSHostPromiseRejectionTracker,
        opaque: *mut ::std::os::raw::c_void,
    );
}
pub type JSInterruptHandler = ::std::option::Option<
    unsafe extern "C" fn(
        rt: *mut JSRuntime,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn JS_SetInterruptHandler(
        rt: *mut JSRuntime,
        cb: JSInterruptHandler,
        opaque: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn JS_SetCanBlock(rt: *mut JSRuntime, can_block: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn JS_SetIsHTMLDDA(ctx: *mut JSContext, obj: JSValue);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSModuleDef {
    _unused: [u8; 0],
}
pub type JSModuleNormalizeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut JSContext,
        module_base_name: *const ::std::os::raw::c_char,
        module_name: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type JSModuleLoaderFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut JSContext,
        module_name: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ) -> *mut JSModuleDef,
>;
unsafe extern "C" {
    pub fn JS_SetModuleLoaderFunc(
        rt: *mut JSRuntime,
        module_normalize: JSModuleNormalizeFunc,
        module_loader: JSModuleLoaderFunc,
        opaque: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn JS_GetImportMeta(ctx: *mut JSContext, m: *mut JSModuleDef) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_GetModuleName(ctx: *mut JSContext, m: *mut JSModuleDef) -> JSAtom;
}
unsafe extern "C" {
    pub fn JS_GetModuleNamespace(ctx: *mut JSContext, m: *mut JSModuleDef) -> JSValue;
}
pub type JSJobFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut JSContext,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
    ) -> JSValue,
>;
unsafe extern "C" {
    pub fn JS_EnqueueJob(
        ctx: *mut JSContext,
        job_func: JSJobFunc,
        argc: ::std::os::raw::c_int,
        argv: *mut JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_IsJobPending(rt: *mut JSRuntime) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_ExecutePendingJob(
        rt: *mut JSRuntime,
        pctx: *mut *mut JSContext,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSSABTab {
    pub tab: *mut *mut u8,
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSSABTab"][::std::mem::size_of::<JSSABTab>() - 8usize];
    ["Alignment of JSSABTab"][::std::mem::align_of::<JSSABTab>() - 4usize];
    ["Offset of field: JSSABTab::tab"][::std::mem::offset_of!(JSSABTab, tab) - 0usize];
    ["Offset of field: JSSABTab::len"][::std::mem::offset_of!(JSSABTab, len) - 4usize];
};
unsafe extern "C" {
    pub fn JS_WriteObject(
        ctx: *mut JSContext,
        psize: *mut usize,
        obj: JSValue,
        flags: ::std::os::raw::c_int,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn JS_WriteObject2(
        ctx: *mut JSContext,
        psize: *mut usize,
        obj: JSValue,
        flags: ::std::os::raw::c_int,
        psab_tab: *mut JSSABTab,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn JS_ReadObject(
        ctx: *mut JSContext,
        buf: *const u8,
        buf_len: usize,
        flags: ::std::os::raw::c_int,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ReadObject2(
        ctx: *mut JSContext,
        buf: *const u8,
        buf_len: usize,
        flags: ::std::os::raw::c_int,
        psab_tab: *mut JSSABTab,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_EvalFunction(ctx: *mut JSContext, fun_obj: JSValue) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_ResolveModule(ctx: *mut JSContext, obj: JSValue) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_GetScriptOrModuleName(
        ctx: *mut JSContext,
        n_stack_levels: ::std::os::raw::c_int,
    ) -> JSAtom;
}
unsafe extern "C" {
    pub fn JS_LoadModule(
        ctx: *mut JSContext,
        basename: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
    ) -> JSValue;
}
pub const JSCFunctionEnum_JS_CFUNC_generic: JSCFunctionEnum = 0;
pub const JSCFunctionEnum_JS_CFUNC_generic_magic: JSCFunctionEnum = 1;
pub const JSCFunctionEnum_JS_CFUNC_constructor: JSCFunctionEnum = 2;
pub const JSCFunctionEnum_JS_CFUNC_constructor_magic: JSCFunctionEnum = 3;
pub const JSCFunctionEnum_JS_CFUNC_constructor_or_func: JSCFunctionEnum = 4;
pub const JSCFunctionEnum_JS_CFUNC_constructor_or_func_magic: JSCFunctionEnum = 5;
pub const JSCFunctionEnum_JS_CFUNC_f_f: JSCFunctionEnum = 6;
pub const JSCFunctionEnum_JS_CFUNC_f_f_f: JSCFunctionEnum = 7;
pub const JSCFunctionEnum_JS_CFUNC_getter: JSCFunctionEnum = 8;
pub const JSCFunctionEnum_JS_CFUNC_setter: JSCFunctionEnum = 9;
pub const JSCFunctionEnum_JS_CFUNC_getter_magic: JSCFunctionEnum = 10;
pub const JSCFunctionEnum_JS_CFUNC_setter_magic: JSCFunctionEnum = 11;
pub const JSCFunctionEnum_JS_CFUNC_iterator_next: JSCFunctionEnum = 12;
pub type JSCFunctionEnum = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union JSCFunctionType {
    pub generic: JSCFunction,
    pub generic_magic: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            this_val: JSValue,
            argc: ::std::os::raw::c_int,
            argv: *mut JSValue,
            magic: ::std::os::raw::c_int,
        ) -> JSValue,
    >,
    pub constructor: JSCFunction,
    pub constructor_magic: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            new_target: JSValue,
            argc: ::std::os::raw::c_int,
            argv: *mut JSValue,
            magic: ::std::os::raw::c_int,
        ) -> JSValue,
    >,
    pub constructor_or_func: JSCFunction,
    pub f_f: ::std::option::Option<unsafe extern "C" fn(arg1: f64) -> f64>,
    pub f_f_f: ::std::option::Option<unsafe extern "C" fn(arg1: f64, arg2: f64) -> f64>,
    pub getter: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut JSContext, this_val: JSValue) -> JSValue,
    >,
    pub setter: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut JSContext, this_val: JSValue, val: JSValue) -> JSValue,
    >,
    pub getter_magic: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            this_val: JSValue,
            magic: ::std::os::raw::c_int,
        ) -> JSValue,
    >,
    pub setter_magic: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            this_val: JSValue,
            val: JSValue,
            magic: ::std::os::raw::c_int,
        ) -> JSValue,
    >,
    pub iterator_next: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut JSContext,
            this_val: JSValue,
            argc: ::std::os::raw::c_int,
            argv: *mut JSValue,
            pdone: *mut ::std::os::raw::c_int,
            magic: ::std::os::raw::c_int,
        ) -> JSValue,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSCFunctionType"][::std::mem::size_of::<JSCFunctionType>() - 4usize];
    ["Alignment of JSCFunctionType"][::std::mem::align_of::<JSCFunctionType>() - 4usize];
    ["Offset of field: JSCFunctionType::generic"]
        [::std::mem::offset_of!(JSCFunctionType, generic) - 0usize];
    ["Offset of field: JSCFunctionType::generic_magic"]
        [::std::mem::offset_of!(JSCFunctionType, generic_magic) - 0usize];
    ["Offset of field: JSCFunctionType::constructor"]
        [::std::mem::offset_of!(JSCFunctionType, constructor) - 0usize];
    ["Offset of field: JSCFunctionType::constructor_magic"]
        [::std::mem::offset_of!(JSCFunctionType, constructor_magic) - 0usize];
    ["Offset of field: JSCFunctionType::constructor_or_func"]
        [::std::mem::offset_of!(JSCFunctionType, constructor_or_func) - 0usize];
    ["Offset of field: JSCFunctionType::f_f"]
        [::std::mem::offset_of!(JSCFunctionType, f_f) - 0usize];
    ["Offset of field: JSCFunctionType::f_f_f"]
        [::std::mem::offset_of!(JSCFunctionType, f_f_f) - 0usize];
    ["Offset of field: JSCFunctionType::getter"]
        [::std::mem::offset_of!(JSCFunctionType, getter) - 0usize];
    ["Offset of field: JSCFunctionType::setter"]
        [::std::mem::offset_of!(JSCFunctionType, setter) - 0usize];
    ["Offset of field: JSCFunctionType::getter_magic"]
        [::std::mem::offset_of!(JSCFunctionType, getter_magic) - 0usize];
    ["Offset of field: JSCFunctionType::setter_magic"]
        [::std::mem::offset_of!(JSCFunctionType, setter_magic) - 0usize];
    ["Offset of field: JSCFunctionType::iterator_next"]
        [::std::mem::offset_of!(JSCFunctionType, iterator_next) - 0usize];
};
unsafe extern "C" {
    pub fn JS_NewCFunction2(
        ctx: *mut JSContext,
        func: JSCFunction,
        name: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        cproto: JSCFunctionEnum,
        magic: ::std::os::raw::c_int,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_NewCFunctionData(
        ctx: *mut JSContext,
        func: JSCFunctionData,
        length: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        data_len: ::std::os::raw::c_int,
        data: *mut JSValue,
    ) -> JSValue;
}
unsafe extern "C" {
    pub fn JS_SetConstructor(ctx: *mut JSContext, func_obj: JSValue, proto: JSValue);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JSCFunctionListEntry {
    pub name: *const ::std::os::raw::c_char,
    pub prop_flags: u8,
    pub def_type: u8,
    pub magic: i16,
    pub u: JSCFunctionListEntry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JSCFunctionListEntry__bindgen_ty_1 {
    pub func: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1,
    pub getset: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2,
    pub alias: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3,
    pub prop_list: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4,
    pub str_: *const ::std::os::raw::c_char,
    pub i32_: i32,
    pub i64_: i64,
    pub u64_: u64,
    pub f64_: f64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1 {
    pub length: u8,
    pub cproto: u8,
    pub cfunc: JSCFunctionType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1::length"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1, length) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1::cproto"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1, cproto) - 1usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1::cfunc"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1, cfunc) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2 {
    pub get: JSCFunctionType,
    pub set: JSCFunctionType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2::get"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2, get) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2::set"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2, set) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3 {
    pub name: *const ::std::os::raw::c_char,
    pub base: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Alignment of JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3::name"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3, name) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3::base"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3, base) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4 {
    pub tab: *const JSCFunctionListEntry,
    pub len: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Alignment of JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4::tab"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4, tab) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4::len"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4, len) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSCFunctionListEntry__bindgen_ty_1"]
        [::std::mem::size_of::<JSCFunctionListEntry__bindgen_ty_1>() - 8usize];
    ["Alignment of JSCFunctionListEntry__bindgen_ty_1"]
        [::std::mem::align_of::<JSCFunctionListEntry__bindgen_ty_1>() - 8usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::func"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, func) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::getset"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, getset) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::alias"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, alias) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::prop_list"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, prop_list) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::str_"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, str_) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::i32_"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, i32_) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::i64_"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, i64_) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::u64_"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, u64_) - 0usize];
    ["Offset of field: JSCFunctionListEntry__bindgen_ty_1::f64_"]
        [::std::mem::offset_of!(JSCFunctionListEntry__bindgen_ty_1, f64_) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSCFunctionListEntry"][::std::mem::size_of::<JSCFunctionListEntry>() - 16usize];
    ["Alignment of JSCFunctionListEntry"][::std::mem::align_of::<JSCFunctionListEntry>() - 8usize];
    ["Offset of field: JSCFunctionListEntry::name"]
        [::std::mem::offset_of!(JSCFunctionListEntry, name) - 0usize];
    ["Offset of field: JSCFunctionListEntry::prop_flags"]
        [::std::mem::offset_of!(JSCFunctionListEntry, prop_flags) - 4usize];
    ["Offset of field: JSCFunctionListEntry::def_type"]
        [::std::mem::offset_of!(JSCFunctionListEntry, def_type) - 5usize];
    ["Offset of field: JSCFunctionListEntry::magic"]
        [::std::mem::offset_of!(JSCFunctionListEntry, magic) - 6usize];
    ["Offset of field: JSCFunctionListEntry::u"]
        [::std::mem::offset_of!(JSCFunctionListEntry, u) - 8usize];
};
unsafe extern "C" {
    pub fn JS_SetPropertyFunctionList(
        ctx: *mut JSContext,
        obj: JSValue,
        tab: *const JSCFunctionListEntry,
        len: ::std::os::raw::c_int,
    );
}
pub type JSModuleInitFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut JSContext, m: *mut JSModuleDef) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn JS_NewCModule(
        ctx: *mut JSContext,
        name_str: *const ::std::os::raw::c_char,
        func: JSModuleInitFunc,
    ) -> *mut JSModuleDef;
}
unsafe extern "C" {
    pub fn JS_AddModuleExport(
        ctx: *mut JSContext,
        m: *mut JSModuleDef,
        name_str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_AddModuleExportList(
        ctx: *mut JSContext,
        m: *mut JSModuleDef,
        tab: *const JSCFunctionListEntry,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetModuleExport(
        ctx: *mut JSContext,
        m: *mut JSModuleDef,
        export_name: *const ::std::os::raw::c_char,
        val: JSValue,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_SetModuleExportList(
        ctx: *mut JSContext,
        m: *mut JSModuleDef,
        tab: *const JSCFunctionListEntry,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn JS_GetVersion() -> *const ::std::os::raw::c_char;
}
